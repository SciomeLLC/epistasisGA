% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/network.threshold.R
\name{network.threshold}
\alias{network.threshold}
\title{A function to identify a threshold fitness score above which chromosomes should be included in a network plot}
\usage{
network.threshold(observed.results, permutation.list, threshold.val)
}
\arguments{
\item{observed.results}{A data frame of results of GA runs for the observed data, containing only unique chromosomes.}

\item{permutation.list}{A list of data frames, each containing unique results for GA runs, for permutations of the observed data.}

\item{threshold.val}{The desired theshold. This function will return a fitness score such that \code{threshold.val}*100\%  of permutations have at least one chromosome exceeding this score.}
}
\value{
A numeric fitness score such that \code{threshold.val}*100\%  of permutation chromosomes exceed this score.
}
\description{
This function identifies a threshold fitness score above which chromosomes should be included in a network plot
}
\examples{
data(case)
data(dad)
data(mom)
library(Matrix)
chrom.mat <- as.matrix(bdiag(list(matrix(rep(TRUE, 2500^2), nrow = 2500),
                              matrix(rep(TRUE, 2500^2), nrow = 2500),
                              matrix(rep(TRUE, 2500^2), nrow = 2500),
                              matrix(rep(TRUE, 2500^2), nrow = 2500))))

pp.list <- preprocess.genetic.data(case[, 1:10], father.genetic.data = dad[ , 1:10],
                               mother.genetic.data = mom[ , 1:10],
                               chrom.mat = chrom.mat[ , 1:10])
## run GA for observed data

run.ga(pp.list, n.chromosomes = 5, chromosome.size = 3, results.dir = "tmp_3",
       cluster.type = "interactive", registryargs = list(file.dir = "tmp_reg", seed = 1500),
       generations = 2, n.islands = 2, island.cluster.size = 1, n.top.chroms = 3)
 combined.res3 <- combine.islands("tmp_3")
 unlink("tmp_reg", recursive = TRUE)

## create three permuted datasets
set.seed(1400)
perm.data.list <- permute.dataset(case[ , 1:10],
                                  father.genetic.data = dad[ , 1:10],
                                  mother.genetic.data = mom[ , 1:10],
                                  n.permutations = 3)

## pre-process permuted data
p1.list <- preprocess.genetic.data(perm.data.list[["permutation1"]]$case,
                                   complement.genetic.data = perm.data.list[["permutation1"]]$comp,
                                   chrom.mat = chrom.mat[ , 1:10])

p2.list <- preprocess.genetic.data(perm.data.list[["permutation2"]]$case,
                                   complement.genetic.data = perm.data.list[["permutation2"]]$comp,
                                   chrom.mat = chrom.mat[ , 1:10])

p3.list <- preprocess.genetic.data(perm.data.list[["permutation3"]]$case,
                                   complement.genetic.data = perm.data.list[["permutation3"]]$comp,
                                   chrom.mat = chrom.mat[ , 1:10])

## run GA for permuted data

run.ga(p1.list, n.chromosomes = 5, chromosome.size = 3, results.dir = "p1_tmp_3",
       cluster.type = "interactive", registryargs = list(file.dir = "tmp_reg", seed = 1500),
       generations = 2, n.islands = 2, island.cluster.size = 1, n.top.chroms = 3)
 p1.combined.res3 <- combine.islands("p1_tmp_3")
 unlink("tmp_reg", recursive = TRUE)

run.ga(p2.list, n.chromosomes = 5, chromosome.size = 3, results.dir = "p2_tmp_3",
       cluster.type = "interactive", registryargs = list(file.dir = "tmp_reg", seed = 1500),
       generations = 2, n.islands = 2, island.cluster.size = 1, n.top.chroms = 3)
 p2.combined.res3 <- combine.islands("p2_tmp_3")
 unlink("tmp_reg", recursive = TRUE)

run.ga(p3.list, n.chromosomes = 5, chromosome.size = 3, results.dir = "p3_tmp_3",
       cluster.type = "interactive", registryargs = list(file.dir = "tmp_reg", seed = 1500),
       generations = 2, n.islands = 2, island.cluster.size = 1, n.top.chroms = 3)
 p3.combined.res3 <- combine.islands("p3_tmp_3")
 unlink("tmp_reg", recursive = TRUE)

 ## get threshold fitness score
 network.threshold(combined.res3$unique.results,
                   list(p1.combined.res3$unique.results,
                        p2.combined.res3$unique.results,
                        p3.combined.res3$unique.results),
                   0.2)

 lapply(c("tmp_3" ,"p1_tmp_3", "p2_tmp_3", "p3_tmp_3"), unlink, recursive = TRUE)

}
