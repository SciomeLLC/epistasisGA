% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run.evd.test.R
\name{run.evd.test}
\alias{run.evd.test}
\title{A function to run tests of the null hypothesis that observed fitness scores
were not drawn from the null extreme value distribution of maximum fitness scores,
using permuted null datasets to estimate the EVD parameters.}
\usage{
run.evd.test(results.list, ...)
}
\arguments{
\item{results.list}{A list of length d, where d is the number of chromosome sizes to be included.
Each element of the list must itself be a list whose first element \code{observed.data} is a vector containing
the fitness scores from the \code{unique.results} chromosome results from \code{combine.islands} for a given chromosome size.
The second element \code{permutation.list} is a list containing all permutation results fitness scores, again using the
\code{unique.results} results output by \code{combine.islands} for each permutation.}

\item{...}{Additional arguments to be passed to \code{evd::fgev}.}
}
\value{
A list of length d, with each element corresponding to a chromosome size, and
each sub-element containing a list with the following:
\describe{
 \item{pval}{A vector of the upper tail probabilities for each of the input observed fitness scores
 based on the null extreme value distribution estimated using the permuted data.}
 \item{null.evd.fit}{The fitted evd object returned by \code{fgev} run on the maxima of the permuted
 data fitness scores.}
}
}
\description{
This function runs tests of the null hypothesis that observed fitness scores
were not drawn from the null extreme value distribution of maximum fitness scores,
using permuted null datasets to estimate the EVD parameters.
}
\examples{

data(case)
data(dad)
data(mom)
data(snp.annotations)
library(Matrix)
set.seed(1400)
block.ld.mat <- as.matrix(bdiag(list(matrix(rep(TRUE, 25^2), nrow = 25),
                              matrix(rep(TRUE, 25^2), nrow = 25),
                              matrix(rep(TRUE, 25^2), nrow = 25),
                              matrix(rep(TRUE, 25^2), nrow = 25))))

pp.list <- preprocess.genetic.data(case, father.genetic.data = dad,
                               mother.genetic.data = mom,
                               block.ld.mat = block.ld.mat)
## run GA for observed data

#observed data chromosome size 2
run.ga(pp.list, n.chromosomes = 5, chromosome.size = 2, results.dir = 'tmp_2',
       cluster.type = 'interactive', registryargs = list(file.dir = 'tmp_reg', seed = 110),
       generations = 2, n.islands = 2, island.cluster.size = 1, n.top.chroms = 3)
 combined.res2 <- combine.islands('tmp_2', snp.annotations, pp.list)
 unlink('tmp_reg', recursive = TRUE)

 #observed data chromosome size 3
 run.ga(pp.list, n.chromosomes = 5, chromosome.size = 3, results.dir = 'tmp_3',
       cluster.type = 'interactive', registryargs = list(file.dir = 'tmp_reg', seed = 25),
       generations = 2, n.islands = 2, island.cluster.size = 1, n.top.chroms = 3)
 combined.res3 <- combine.islands('tmp_3', snp.annotations, pp.list)
 unlink('tmp_reg', recursive = TRUE)

#create four permuted datasets
set.seed(190)
perm.data.list <- permute.dataset(case,
                                  father.genetic.data = dad,
                                  mother.genetic.data = mom,
                                  n.permutations = 4)

#pre-process permuted data
p1.list <- preprocess.genetic.data(perm.data.list[['permutation1']]$case,
                                   complement.genetic.data = perm.data.list[['permutation1']]$comp,
                                   block.ld.mat = block.ld.mat)

p2.list <- preprocess.genetic.data(perm.data.list[['permutation2']]$case,
                                   complement.genetic.data = perm.data.list[['permutation2']]$comp,
                                   block.ld.mat = block.ld.mat)

p3.list <- preprocess.genetic.data(perm.data.list[['permutation3']]$case,
                                   complement.genetic.data = perm.data.list[['permutation3']]$comp,
                                   block.ld.mat = block.ld.mat)

p4.list <- preprocess.genetic.data(perm.data.list[['permutation4']]$case,
                                   complement.genetic.data = perm.data.list[['permutation4']]$comp,
                                   block.ld.mat = block.ld.mat)
##run GA for permuted data

#permutation 1, chromosome size 2
run.ga(p1.list, n.chromosomes = 5, chromosome.size = 2, results.dir = 'p1_tmp_2',
       cluster.type = 'interactive', registryargs = list(file.dir = 'tmp_reg', seed = 1500),
       generations = 2, n.islands = 2, island.cluster.size = 1, n.top.chroms = 3)
 p1.combined.res2 <- combine.islands('p1_tmp_2', snp.annotations, p1.list)
 unlink('tmp_reg', recursive = TRUE)

#permutation 1, chromosome size 3
run.ga(p1.list, n.chromosomes = 5, chromosome.size = 3, results.dir = 'p1_tmp_3',
       cluster.type = 'interactive', registryargs = list(file.dir = 'tmp_reg', seed = 1500),
       generations = 2, n.islands = 2, island.cluster.size = 1, n.top.chroms = 3)
 p1.combined.res3 <- combine.islands('p1_tmp_3', snp.annotations, p1.list)
 unlink('tmp_reg', recursive = TRUE)

#permutation 2, chromosome size 2
run.ga(p2.list, n.chromosomes = 5, chromosome.size = 2, results.dir = 'p2_tmp_2',
       cluster.type = 'interactive', registryargs = list(file.dir = 'tmp_reg', seed = 1500),
       generations = 2, n.islands = 2, island.cluster.size = 1, n.top.chroms = 3)
 p2.combined.res2 <- combine.islands('p2_tmp_2', snp.annotations, p2.list)
 unlink('tmp_reg', recursive = TRUE)

#permutation 2, chromosome size 3
run.ga(p2.list, n.chromosomes = 5, chromosome.size = 3, results.dir = 'p2_tmp_3',
       cluster.type = 'interactive', registryargs = list(file.dir = 'tmp_reg', seed = 1500),
       generations = 2, n.islands = 2, island.cluster.size = 1, n.top.chroms = 3)
 p2.combined.res3 <- combine.islands('p2_tmp_3', snp.annotations, p2.list)
 unlink('tmp_reg', recursive = TRUE)

#permutation 3, chromosome size 2
run.ga(p3.list, n.chromosomes = 5, chromosome.size = 2, results.dir = 'p3_tmp_2',
       cluster.type = 'interactive', registryargs = list(file.dir = 'tmp_reg', seed = 1500),
       generations = 2, n.islands = 2, island.cluster.size = 1, n.top.chroms = 3)
 p3.combined.res2 <- combine.islands('p3_tmp_2', snp.annotations, p3.list)
 unlink('tmp_reg', recursive = TRUE)

#permutation 3, chromosome size 3
run.ga(p3.list, n.chromosomes = 5, chromosome.size = 3, results.dir = 'p3_tmp_3',
       cluster.type = 'interactive', registryargs = list(file.dir = 'tmp_reg', seed = 1500),
       generations = 2, n.islands = 2, island.cluster.size = 1, n.top.chroms = 3)
 p3.combined.res3 <- combine.islands('p3_tmp_3', snp.annotations, p3.list)
 unlink('tmp_reg', recursive = TRUE)

#permutation 4, chromosome size 2
run.ga(p4.list, n.chromosomes = 5, chromosome.size = 2, results.dir = 'p4_tmp_2',
       cluster.type = 'interactive', registryargs = list(file.dir = 'tmp_reg', seed = 1500),
       generations = 2, n.islands = 2, island.cluster.size = 1, n.top.chroms = 3)
 p4.combined.res2 <- combine.islands('p4_tmp_2', snp.annotations, p4.list)
 unlink('tmp_reg', recursive = TRUE)

#permutation 4, chromosome size 3
run.ga(p4.list, n.chromosomes = 5, chromosome.size = 3, results.dir = 'p4_tmp_3',
       cluster.type = 'interactive', registryargs = list(file.dir = 'tmp_reg', seed = 1500),
       generations = 2, n.islands = 2, island.cluster.size = 1, n.top.chroms = 3)
 p4.combined.res3 <- combine.islands('p4_tmp_3', snp.annotations, p4.list)
 unlink('tmp_reg', recursive = TRUE)

 ## create list of results

 #chromosome size 2 results
 chrom2.list <- list(observed.data = combined.res2$unique.results$fitness.score,
                    permutation.list = list(p1.combined.res2$unique.results$fitness.score,
                                            p2.combined.res2$unique.results$fitness.score,
                                            p3.combined.res2$unique.results$fitness.score,
                                            p4.combined.res2$unique.results$fitness.score))

 #chromosome size 3 results
 chrom3.list <- list(observed.data = combined.res3$unique.results$fitness.score,
                    permutation.list = list(p1.combined.res3$unique.results$fitness.score,
                                            p2.combined.res3$unique.results$fitness.score,
                                            p3.combined.res3$unique.results$fitness.score,
                                            p4.combined.res3$unique.results$fitness.score))

 final.results <- list(chrom2.list, chrom3.list)

 ## run test
 ## using std.err = FALSE only using 4 permutes
 evd.test.res <- run.evd.test(final.results, std.err = FALSE)

 lapply(c('tmp_2', 'tmp_3', 'p1_tmp_2', 'p2_tmp_2', 'p3_tmp_2', 'p4_tmp_2',
          'p1_tmp_3', 'p2_tmp_3', 'p3_tmp_3', 'p4_tmp_3'), unlink, recursive = TRUE)


}
