% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compute.edge.scores.R
\name{compute.edge.scores}
\alias{compute.edge.scores}
\title{A function to compute edge scores for network plots of results.}
\usage{
compute.edge.scores(results.df, score.type = "max")
}
\arguments{
\item{results.df}{A subset of the \code{unique.results} data frame of results from \code{combine.islands} after running \code{run.ga}.}

\item{score.type}{A character string specifying the method for scoring edges, with options
'max', 'sum', or 'logsum'. The default is 'max', but 'logsum' may also be particularly useful.
 Note that "logsum" is actually the log of one plus the sum of the fitness scores to avoid nodes or edges having negative
 weights.}
}
\value{
A data.table where the first two columns represent SNPs and the third column (edge.score)
is the edge score of a chromosome containing those SNPs.
}
\description{
This function returns a data.table of edge weights for use in network plots of GA results.
}
\examples{

data(case)
data(dad)
data(mom)
data(snp.annotations)
library(Matrix)
block.ld.mat <- as.matrix(bdiag(list(matrix(rep(TRUE, 25^2), nrow = 25),
                              matrix(rep(TRUE, 25^2), nrow = 25),
                              matrix(rep(TRUE, 25^2), nrow = 25),
                              matrix(rep(TRUE, 25^2), nrow = 25))))

pp.list <- preprocess.genetic.data(case[, 1:10], father.genetic.data = dad[ , 1:10],
                               mother.genetic.data = mom[ , 1:10],
                               block.ld.mat = block.ld.mat[ , 1:10])

run.ga(pp.list, n.chromosomes = 4, chromosome.size = 3, results.dir = 'tmp',
       cluster.type = 'interactive', registryargs = list(file.dir = 'tmp_reg', seed = 1500),
       generations = 2, n.islands = 2, island.cluster.size = 1, n.top.chroms = 3)

combined.res <- combine.islands('tmp', snp.annotations[ 1:10, ], pp.list)

set.seed(10)
edge.scores <- compute.edge.scores(combined.res$unique.results)

unlink('tmp', recursive = TRUE)
unlink('tmp_reg', recursive = TRUE)

}
