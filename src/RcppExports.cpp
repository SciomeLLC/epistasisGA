// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// scalar_min
int scalar_min(int x, int y);
RcppExport SEXP _epistasisGAGE_scalar_min(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(scalar_min(x, y));
    return rcpp_result_gen;
END_RCPP
}
// concat
IntegerVector concat(IntegerVector x, IntegerVector y);
RcppExport SEXP _epistasisGAGE_concat(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(concat(x, y));
    return rcpp_result_gen;
END_RCPP
}
// sort_by_order
IntegerVector sort_by_order(IntegerVector x, NumericVector y, int sort_type);
RcppExport SEXP _epistasisGAGE_sort_by_order(SEXP xSEXP, SEXP ySEXP, SEXP sort_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type sort_type(sort_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(sort_by_order(x, y, sort_type));
    return rcpp_result_gen;
END_RCPP
}
// seq_by2
IntegerVector seq_by2(int l);
RcppExport SEXP _epistasisGAGE_seq_by2(SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(seq_by2(l));
    return rcpp_result_gen;
END_RCPP
}
// unique_chrom_list
LogicalVector unique_chrom_list(List chromosome_list, int chrom_size);
RcppExport SEXP _epistasisGAGE_unique_chrom_list(SEXP chromosome_listSEXP, SEXP chrom_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type chromosome_list(chromosome_listSEXP);
    Rcpp::traits::input_parameter< int >::type chrom_size(chrom_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(unique_chrom_list(chromosome_list, chrom_size));
    return rcpp_result_gen;
END_RCPP
}
// get_target_snps_ld_blocks
IntegerVector get_target_snps_ld_blocks(IntegerVector target_snps_in, IntegerVector ld_block_vec);
RcppExport SEXP _epistasisGAGE_get_target_snps_ld_blocks(SEXP target_snps_inSEXP, SEXP ld_block_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type target_snps_in(target_snps_inSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ld_block_vec(ld_block_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(get_target_snps_ld_blocks(target_snps_in, ld_block_vec));
    return rcpp_result_gen;
END_RCPP
}
// parse_input_data
arma::Cube<short> parse_input_data(List genetic_data_in);
RcppExport SEXP _epistasisGAGE_parse_input_data(SEXP genetic_data_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type genetic_data_in(genetic_data_inSEXP);
    rcpp_result_gen = Rcpp::wrap(parse_input_data(genetic_data_in));
    return rcpp_result_gen;
END_RCPP
}
// parse_input_data_GxE
arma::field<arma::Cube<short>> parse_input_data_GxE(List genetic_data_in);
RcppExport SEXP _epistasisGAGE_parse_input_data_GxE(SEXP genetic_data_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type genetic_data_in(genetic_data_inSEXP);
    rcpp_result_gen = Rcpp::wrap(parse_input_data_GxE(genetic_data_in));
    return rcpp_result_gen;
END_RCPP
}
// compute_dif_vecs
arma::field<arma::rowvec> compute_dif_vecs(arma::uvec total_different_snps, arma::mat cases_minus_complements, arma::umat both_one_mat, IntegerVector weight_lookup, int n_different_snps_weight, int n_both_one_weight);
RcppExport SEXP _epistasisGAGE_compute_dif_vecs(SEXP total_different_snpsSEXP, SEXP cases_minus_complementsSEXP, SEXP both_one_matSEXP, SEXP weight_lookupSEXP, SEXP n_different_snps_weightSEXP, SEXP n_both_one_weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type total_different_snps(total_different_snpsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type cases_minus_complements(cases_minus_complementsSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type both_one_mat(both_one_matSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type weight_lookup(weight_lookupSEXP);
    Rcpp::traits::input_parameter< int >::type n_different_snps_weight(n_different_snps_weightSEXP);
    Rcpp::traits::input_parameter< int >::type n_both_one_weight(n_both_one_weightSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_dif_vecs(total_different_snps, cases_minus_complements, both_one_mat, weight_lookup, n_different_snps_weight, n_both_one_weight));
    return rcpp_result_gen;
END_RCPP
}
// find_high_risk
arma::ucube find_high_risk(arma::mat case_genetic_data, arma::mat comp_genetic_data, arma::uvec informative_families_l, arma::uvec pos_risk, arma::uvec neg_risk, int n_pos, int n_neg);
RcppExport SEXP _epistasisGAGE_find_high_risk(SEXP case_genetic_dataSEXP, SEXP comp_genetic_dataSEXP, SEXP informative_families_lSEXP, SEXP pos_riskSEXP, SEXP neg_riskSEXP, SEXP n_posSEXP, SEXP n_negSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type case_genetic_data(case_genetic_dataSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type comp_genetic_data(comp_genetic_dataSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type informative_families_l(informative_families_lSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos_risk(pos_riskSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type neg_risk(neg_riskSEXP);
    Rcpp::traits::input_parameter< int >::type n_pos(n_posSEXP);
    Rcpp::traits::input_parameter< int >::type n_neg(n_negSEXP);
    rcpp_result_gen = Rcpp::wrap(find_high_risk(case_genetic_data, comp_genetic_data, informative_families_l, pos_risk, neg_risk, n_pos, n_neg));
    return rcpp_result_gen;
END_RCPP
}
// switch_vals
void switch_vals(arma::mat& x, arma::uvec target_col, double old_val, double new_val);
RcppExport SEXP _epistasisGAGE_switch_vals(SEXP xSEXP, SEXP target_colSEXP, SEXP old_valSEXP, SEXP new_valSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type target_col(target_colSEXP);
    Rcpp::traits::input_parameter< double >::type old_val(old_valSEXP);
    Rcpp::traits::input_parameter< double >::type new_val(new_valSEXP);
    switch_vals(x, target_col, old_val, new_val);
    return R_NilValue;
END_RCPP
}
// chrom_fitness_score_internal
List chrom_fitness_score_internal(arma::mat case_genetic_data, arma::mat complement_genetic_data, IntegerVector target_snps_block, IntegerVector uni_target_blocks, IntegerVector weight_lookup, int n_different_snps_weight, int n_both_one_weight, double recessive_ref_prop, double recode_test_stat, bool epi_test, bool GxE);
RcppExport SEXP _epistasisGAGE_chrom_fitness_score_internal(SEXP case_genetic_dataSEXP, SEXP complement_genetic_dataSEXP, SEXP target_snps_blockSEXP, SEXP uni_target_blocksSEXP, SEXP weight_lookupSEXP, SEXP n_different_snps_weightSEXP, SEXP n_both_one_weightSEXP, SEXP recessive_ref_propSEXP, SEXP recode_test_statSEXP, SEXP epi_testSEXP, SEXP GxESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type case_genetic_data(case_genetic_dataSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type complement_genetic_data(complement_genetic_dataSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type target_snps_block(target_snps_blockSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type uni_target_blocks(uni_target_blocksSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type weight_lookup(weight_lookupSEXP);
    Rcpp::traits::input_parameter< int >::type n_different_snps_weight(n_different_snps_weightSEXP);
    Rcpp::traits::input_parameter< int >::type n_both_one_weight(n_both_one_weightSEXP);
    Rcpp::traits::input_parameter< double >::type recessive_ref_prop(recessive_ref_propSEXP);
    Rcpp::traits::input_parameter< double >::type recode_test_stat(recode_test_statSEXP);
    Rcpp::traits::input_parameter< bool >::type epi_test(epi_testSEXP);
    Rcpp::traits::input_parameter< bool >::type GxE(GxESEXP);
    rcpp_result_gen = Rcpp::wrap(chrom_fitness_score_internal(case_genetic_data, complement_genetic_data, target_snps_block, uni_target_blocks, weight_lookup, n_different_snps_weight, n_both_one_weight, recessive_ref_prop, recode_test_stat, epi_test, GxE));
    return rcpp_result_gen;
END_RCPP
}
// chrom_fitness_score
List chrom_fitness_score(arma::Mat<short> case_genetic_data_in, arma::Mat<short> complement_genetic_data_in, IntegerVector target_snps_in, IntegerVector ld_block_vec, IntegerVector weight_lookup, int n_different_snps_weight, int n_both_one_weight, double recessive_ref_prop, double recode_test_stat, bool epi_test, bool GxE);
RcppExport SEXP _epistasisGAGE_chrom_fitness_score(SEXP case_genetic_data_inSEXP, SEXP complement_genetic_data_inSEXP, SEXP target_snps_inSEXP, SEXP ld_block_vecSEXP, SEXP weight_lookupSEXP, SEXP n_different_snps_weightSEXP, SEXP n_both_one_weightSEXP, SEXP recessive_ref_propSEXP, SEXP recode_test_statSEXP, SEXP epi_testSEXP, SEXP GxESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<short> >::type case_genetic_data_in(case_genetic_data_inSEXP);
    Rcpp::traits::input_parameter< arma::Mat<short> >::type complement_genetic_data_in(complement_genetic_data_inSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type target_snps_in(target_snps_inSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ld_block_vec(ld_block_vecSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type weight_lookup(weight_lookupSEXP);
    Rcpp::traits::input_parameter< int >::type n_different_snps_weight(n_different_snps_weightSEXP);
    Rcpp::traits::input_parameter< int >::type n_both_one_weight(n_both_one_weightSEXP);
    Rcpp::traits::input_parameter< double >::type recessive_ref_prop(recessive_ref_propSEXP);
    Rcpp::traits::input_parameter< double >::type recode_test_stat(recode_test_statSEXP);
    Rcpp::traits::input_parameter< bool >::type epi_test(epi_testSEXP);
    Rcpp::traits::input_parameter< bool >::type GxE(GxESEXP);
    rcpp_result_gen = Rcpp::wrap(chrom_fitness_score(case_genetic_data_in, complement_genetic_data_in, target_snps_in, ld_block_vec, weight_lookup, n_different_snps_weight, n_both_one_weight, recessive_ref_prop, recode_test_stat, epi_test, GxE));
    return rcpp_result_gen;
END_RCPP
}
// GxE_fitness_score_internal
List GxE_fitness_score_internal(arma::mat case_genetic_data, arma::mat complement_genetic_data, IntegerVector target_snps_block, IntegerVector uni_target_blocks, IntegerVector weight_lookup, arma::field<arma::uvec> exposure_field, IntegerVector exposure_risk_levels, int n_different_snps_weight, int n_both_one_weight, double recessive_ref_prop, double recode_test_stat, bool check_risk);
RcppExport SEXP _epistasisGAGE_GxE_fitness_score_internal(SEXP case_genetic_dataSEXP, SEXP complement_genetic_dataSEXP, SEXP target_snps_blockSEXP, SEXP uni_target_blocksSEXP, SEXP weight_lookupSEXP, SEXP exposure_fieldSEXP, SEXP exposure_risk_levelsSEXP, SEXP n_different_snps_weightSEXP, SEXP n_both_one_weightSEXP, SEXP recessive_ref_propSEXP, SEXP recode_test_statSEXP, SEXP check_riskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type case_genetic_data(case_genetic_dataSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type complement_genetic_data(complement_genetic_dataSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type target_snps_block(target_snps_blockSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type uni_target_blocks(uni_target_blocksSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type weight_lookup(weight_lookupSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::uvec> >::type exposure_field(exposure_fieldSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type exposure_risk_levels(exposure_risk_levelsSEXP);
    Rcpp::traits::input_parameter< int >::type n_different_snps_weight(n_different_snps_weightSEXP);
    Rcpp::traits::input_parameter< int >::type n_both_one_weight(n_both_one_weightSEXP);
    Rcpp::traits::input_parameter< double >::type recessive_ref_prop(recessive_ref_propSEXP);
    Rcpp::traits::input_parameter< double >::type recode_test_stat(recode_test_statSEXP);
    Rcpp::traits::input_parameter< bool >::type check_risk(check_riskSEXP);
    rcpp_result_gen = Rcpp::wrap(GxE_fitness_score_internal(case_genetic_data, complement_genetic_data, target_snps_block, uni_target_blocks, weight_lookup, exposure_field, exposure_risk_levels, n_different_snps_weight, n_both_one_weight, recessive_ref_prop, recode_test_stat, check_risk));
    return rcpp_result_gen;
END_RCPP
}
// GxE_fitness_score
List GxE_fitness_score(arma::field<arma::Cube<short>> in_data_field, IntegerVector target_snps_in, IntegerVector ld_block_vec, IntegerVector weight_lookup, IntegerVector exposure_risk_levels, int n_different_snps_weight, int n_both_one_weight, double recessive_ref_prop, double recode_test_stat, bool check_risk);
RcppExport SEXP _epistasisGAGE_GxE_fitness_score(SEXP in_data_fieldSEXP, SEXP target_snps_inSEXP, SEXP ld_block_vecSEXP, SEXP weight_lookupSEXP, SEXP exposure_risk_levelsSEXP, SEXP n_different_snps_weightSEXP, SEXP n_both_one_weightSEXP, SEXP recessive_ref_propSEXP, SEXP recode_test_statSEXP, SEXP check_riskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::Cube<short>> >::type in_data_field(in_data_fieldSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type target_snps_in(target_snps_inSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ld_block_vec(ld_block_vecSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type weight_lookup(weight_lookupSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type exposure_risk_levels(exposure_risk_levelsSEXP);
    Rcpp::traits::input_parameter< int >::type n_different_snps_weight(n_different_snps_weightSEXP);
    Rcpp::traits::input_parameter< int >::type n_both_one_weight(n_both_one_weightSEXP);
    Rcpp::traits::input_parameter< double >::type recessive_ref_prop(recessive_ref_propSEXP);
    Rcpp::traits::input_parameter< double >::type recode_test_stat(recode_test_statSEXP);
    Rcpp::traits::input_parameter< bool >::type check_risk(check_riskSEXP);
    rcpp_result_gen = Rcpp::wrap(GxE_fitness_score(in_data_field, target_snps_in, ld_block_vec, weight_lookup, exposure_risk_levels, n_different_snps_weight, n_both_one_weight, recessive_ref_prop, recode_test_stat, check_risk));
    return rcpp_result_gen;
END_RCPP
}
// chrom_fitness_list
List chrom_fitness_list(arma::Mat<short> case_genetic_data, arma::Mat<short> complement_genetic_data, List chromosome_list, IntegerVector ld_block_vec, IntegerVector weight_lookup, int n_different_snps_weight, int n_both_one_weight, double recessive_ref_prop, double recode_test_stat);
RcppExport SEXP _epistasisGAGE_chrom_fitness_list(SEXP case_genetic_dataSEXP, SEXP complement_genetic_dataSEXP, SEXP chromosome_listSEXP, SEXP ld_block_vecSEXP, SEXP weight_lookupSEXP, SEXP n_different_snps_weightSEXP, SEXP n_both_one_weightSEXP, SEXP recessive_ref_propSEXP, SEXP recode_test_statSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<short> >::type case_genetic_data(case_genetic_dataSEXP);
    Rcpp::traits::input_parameter< arma::Mat<short> >::type complement_genetic_data(complement_genetic_dataSEXP);
    Rcpp::traits::input_parameter< List >::type chromosome_list(chromosome_listSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ld_block_vec(ld_block_vecSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type weight_lookup(weight_lookupSEXP);
    Rcpp::traits::input_parameter< int >::type n_different_snps_weight(n_different_snps_weightSEXP);
    Rcpp::traits::input_parameter< int >::type n_both_one_weight(n_both_one_weightSEXP);
    Rcpp::traits::input_parameter< double >::type recessive_ref_prop(recessive_ref_propSEXP);
    Rcpp::traits::input_parameter< double >::type recode_test_stat(recode_test_statSEXP);
    rcpp_result_gen = Rcpp::wrap(chrom_fitness_list(case_genetic_data, complement_genetic_data, chromosome_list, ld_block_vec, weight_lookup, n_different_snps_weight, n_both_one_weight, recessive_ref_prop, recode_test_stat));
    return rcpp_result_gen;
END_RCPP
}
// GxE_fitness_list
List GxE_fitness_list(arma::field<arma::Cube<short>> in_data_field, List chromosome_list, IntegerVector ld_block_vec, IntegerVector weight_lookup, IntegerVector exposure_risk_levels, int n_different_snps_weight, int n_both_one_weight, double recessive_ref_prop, double recode_test_stat, bool check_risk);
RcppExport SEXP _epistasisGAGE_GxE_fitness_list(SEXP in_data_fieldSEXP, SEXP chromosome_listSEXP, SEXP ld_block_vecSEXP, SEXP weight_lookupSEXP, SEXP exposure_risk_levelsSEXP, SEXP n_different_snps_weightSEXP, SEXP n_both_one_weightSEXP, SEXP recessive_ref_propSEXP, SEXP recode_test_statSEXP, SEXP check_riskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::Cube<short>> >::type in_data_field(in_data_fieldSEXP);
    Rcpp::traits::input_parameter< List >::type chromosome_list(chromosome_listSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ld_block_vec(ld_block_vecSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type weight_lookup(weight_lookupSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type exposure_risk_levels(exposure_risk_levelsSEXP);
    Rcpp::traits::input_parameter< int >::type n_different_snps_weight(n_different_snps_weightSEXP);
    Rcpp::traits::input_parameter< int >::type n_both_one_weight(n_both_one_weightSEXP);
    Rcpp::traits::input_parameter< double >::type recessive_ref_prop(recessive_ref_propSEXP);
    Rcpp::traits::input_parameter< double >::type recode_test_stat(recode_test_statSEXP);
    Rcpp::traits::input_parameter< bool >::type check_risk(check_riskSEXP);
    rcpp_result_gen = Rcpp::wrap(GxE_fitness_list(in_data_field, chromosome_list, ld_block_vec, weight_lookup, exposure_risk_levels, n_different_snps_weight, n_both_one_weight, recessive_ref_prop, recode_test_stat, check_risk));
    return rcpp_result_gen;
END_RCPP
}
// compute_population_fitness
List compute_population_fitness(arma::Mat<short> case_genetic_data, arma::Mat<short> complement_genetic_data, arma::field<arma::Cube<short>> in_data_field, IntegerVector ld_block_vec, List chromosome_list, IntegerVector weight_lookup, IntegerVector exposure_risk_levels, int n_different_snps_weight, int n_both_one_weight, double recessive_ref_prop, double recode_test_stat, bool GxE, bool check_risk);
RcppExport SEXP _epistasisGAGE_compute_population_fitness(SEXP case_genetic_dataSEXP, SEXP complement_genetic_dataSEXP, SEXP in_data_fieldSEXP, SEXP ld_block_vecSEXP, SEXP chromosome_listSEXP, SEXP weight_lookupSEXP, SEXP exposure_risk_levelsSEXP, SEXP n_different_snps_weightSEXP, SEXP n_both_one_weightSEXP, SEXP recessive_ref_propSEXP, SEXP recode_test_statSEXP, SEXP GxESEXP, SEXP check_riskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<short> >::type case_genetic_data(case_genetic_dataSEXP);
    Rcpp::traits::input_parameter< arma::Mat<short> >::type complement_genetic_data(complement_genetic_dataSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::Cube<short>> >::type in_data_field(in_data_fieldSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ld_block_vec(ld_block_vecSEXP);
    Rcpp::traits::input_parameter< List >::type chromosome_list(chromosome_listSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type weight_lookup(weight_lookupSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type exposure_risk_levels(exposure_risk_levelsSEXP);
    Rcpp::traits::input_parameter< int >::type n_different_snps_weight(n_different_snps_weightSEXP);
    Rcpp::traits::input_parameter< int >::type n_both_one_weight(n_both_one_weightSEXP);
    Rcpp::traits::input_parameter< double >::type recessive_ref_prop(recessive_ref_propSEXP);
    Rcpp::traits::input_parameter< double >::type recode_test_stat(recode_test_statSEXP);
    Rcpp::traits::input_parameter< bool >::type GxE(GxESEXP);
    Rcpp::traits::input_parameter< bool >::type check_risk(check_riskSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_population_fitness(case_genetic_data, complement_genetic_data, in_data_field, ld_block_vec, chromosome_list, weight_lookup, exposure_risk_levels, n_different_snps_weight, n_both_one_weight, recessive_ref_prop, recode_test_stat, GxE, check_risk));
    return rcpp_result_gen;
END_RCPP
}
// find_top_chrom
List find_top_chrom(NumericVector fitness_scores, List chromosome_list, int chromosome_size);
RcppExport SEXP _epistasisGAGE_find_top_chrom(SEXP fitness_scoresSEXP, SEXP chromosome_listSEXP, SEXP chromosome_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type fitness_scores(fitness_scoresSEXP);
    Rcpp::traits::input_parameter< List >::type chromosome_list(chromosome_listSEXP);
    Rcpp::traits::input_parameter< int >::type chromosome_size(chromosome_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(find_top_chrom(fitness_scores, chromosome_list, chromosome_size));
    return rcpp_result_gen;
END_RCPP
}
// initiate_population
List initiate_population(int n_candidate_snps, arma::Mat<short> case_genetic_data, arma::Mat<short> complement_genetic_data, arma::field<arma::Cube<short>> in_data_field, IntegerVector ld_block_vec, int n_chromosomes, int chromosome_size, IntegerVector weight_lookup, IntegerVector exposure_risk_levels, int n_different_snps_weight, int n_both_one_weight, double recessive_ref_prop, double recode_test_stat, int max_generations, bool initial_sample_duplicates, bool GxE, bool check_risk);
RcppExport SEXP _epistasisGAGE_initiate_population(SEXP n_candidate_snpsSEXP, SEXP case_genetic_dataSEXP, SEXP complement_genetic_dataSEXP, SEXP in_data_fieldSEXP, SEXP ld_block_vecSEXP, SEXP n_chromosomesSEXP, SEXP chromosome_sizeSEXP, SEXP weight_lookupSEXP, SEXP exposure_risk_levelsSEXP, SEXP n_different_snps_weightSEXP, SEXP n_both_one_weightSEXP, SEXP recessive_ref_propSEXP, SEXP recode_test_statSEXP, SEXP max_generationsSEXP, SEXP initial_sample_duplicatesSEXP, SEXP GxESEXP, SEXP check_riskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_candidate_snps(n_candidate_snpsSEXP);
    Rcpp::traits::input_parameter< arma::Mat<short> >::type case_genetic_data(case_genetic_dataSEXP);
    Rcpp::traits::input_parameter< arma::Mat<short> >::type complement_genetic_data(complement_genetic_dataSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::Cube<short>> >::type in_data_field(in_data_fieldSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ld_block_vec(ld_block_vecSEXP);
    Rcpp::traits::input_parameter< int >::type n_chromosomes(n_chromosomesSEXP);
    Rcpp::traits::input_parameter< int >::type chromosome_size(chromosome_sizeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type weight_lookup(weight_lookupSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type exposure_risk_levels(exposure_risk_levelsSEXP);
    Rcpp::traits::input_parameter< int >::type n_different_snps_weight(n_different_snps_weightSEXP);
    Rcpp::traits::input_parameter< int >::type n_both_one_weight(n_both_one_weightSEXP);
    Rcpp::traits::input_parameter< double >::type recessive_ref_prop(recessive_ref_propSEXP);
    Rcpp::traits::input_parameter< double >::type recode_test_stat(recode_test_statSEXP);
    Rcpp::traits::input_parameter< int >::type max_generations(max_generationsSEXP);
    Rcpp::traits::input_parameter< bool >::type initial_sample_duplicates(initial_sample_duplicatesSEXP);
    Rcpp::traits::input_parameter< bool >::type GxE(GxESEXP);
    Rcpp::traits::input_parameter< bool >::type check_risk(check_riskSEXP);
    rcpp_result_gen = Rcpp::wrap(initiate_population(n_candidate_snps, case_genetic_data, complement_genetic_data, in_data_field, ld_block_vec, n_chromosomes, chromosome_size, weight_lookup, exposure_risk_levels, n_different_snps_weight, n_both_one_weight, recessive_ref_prop, recode_test_stat, max_generations, initial_sample_duplicates, GxE, check_risk));
    return rcpp_result_gen;
END_RCPP
}
// check_convergence
bool check_convergence(int island_cluster_size, List island_populations);
RcppExport SEXP _epistasisGAGE_check_convergence(SEXP island_cluster_sizeSEXP, SEXP island_populationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type island_cluster_size(island_cluster_sizeSEXP);
    Rcpp::traits::input_parameter< List >::type island_populations(island_populationsSEXP);
    rcpp_result_gen = Rcpp::wrap(check_convergence(island_cluster_size, island_populations));
    return rcpp_result_gen;
END_RCPP
}
// check_max_gens
bool check_max_gens(List island_populations, int max_generations);
RcppExport SEXP _epistasisGAGE_check_max_gens(SEXP island_populationsSEXP, SEXP max_generationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type island_populations(island_populationsSEXP);
    Rcpp::traits::input_parameter< int >::type max_generations(max_generationsSEXP);
    rcpp_result_gen = Rcpp::wrap(check_max_gens(island_populations, max_generations));
    return rcpp_result_gen;
END_RCPP
}
// run_GADGETS
List run_GADGETS(List genetic_data_list, int n_candidate_snps, int island_cluster_size, int n_migrations, IntegerVector ld_block_vec, int n_chromosomes, int chromosome_size, IntegerVector weight_lookup, NumericVector snp_chisq, Nullable<IntegerVector> exposure_risk_levels_in, int n_different_snps_weight, int n_both_one_weight, int migration_interval, int gen_same_fitness, int max_generations, bool initial_sample_duplicates, double crossover_prop, double recessive_ref_prop, double recode_test_stat);
RcppExport SEXP _epistasisGAGE_run_GADGETS(SEXP genetic_data_listSEXP, SEXP n_candidate_snpsSEXP, SEXP island_cluster_sizeSEXP, SEXP n_migrationsSEXP, SEXP ld_block_vecSEXP, SEXP n_chromosomesSEXP, SEXP chromosome_sizeSEXP, SEXP weight_lookupSEXP, SEXP snp_chisqSEXP, SEXP exposure_risk_levels_inSEXP, SEXP n_different_snps_weightSEXP, SEXP n_both_one_weightSEXP, SEXP migration_intervalSEXP, SEXP gen_same_fitnessSEXP, SEXP max_generationsSEXP, SEXP initial_sample_duplicatesSEXP, SEXP crossover_propSEXP, SEXP recessive_ref_propSEXP, SEXP recode_test_statSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type genetic_data_list(genetic_data_listSEXP);
    Rcpp::traits::input_parameter< int >::type n_candidate_snps(n_candidate_snpsSEXP);
    Rcpp::traits::input_parameter< int >::type island_cluster_size(island_cluster_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type n_migrations(n_migrationsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ld_block_vec(ld_block_vecSEXP);
    Rcpp::traits::input_parameter< int >::type n_chromosomes(n_chromosomesSEXP);
    Rcpp::traits::input_parameter< int >::type chromosome_size(chromosome_sizeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type weight_lookup(weight_lookupSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type snp_chisq(snp_chisqSEXP);
    Rcpp::traits::input_parameter< Nullable<IntegerVector> >::type exposure_risk_levels_in(exposure_risk_levels_inSEXP);
    Rcpp::traits::input_parameter< int >::type n_different_snps_weight(n_different_snps_weightSEXP);
    Rcpp::traits::input_parameter< int >::type n_both_one_weight(n_both_one_weightSEXP);
    Rcpp::traits::input_parameter< int >::type migration_interval(migration_intervalSEXP);
    Rcpp::traits::input_parameter< int >::type gen_same_fitness(gen_same_fitnessSEXP);
    Rcpp::traits::input_parameter< int >::type max_generations(max_generationsSEXP);
    Rcpp::traits::input_parameter< bool >::type initial_sample_duplicates(initial_sample_duplicatesSEXP);
    Rcpp::traits::input_parameter< double >::type crossover_prop(crossover_propSEXP);
    Rcpp::traits::input_parameter< double >::type recessive_ref_prop(recessive_ref_propSEXP);
    Rcpp::traits::input_parameter< double >::type recode_test_stat(recode_test_statSEXP);
    rcpp_result_gen = Rcpp::wrap(run_GADGETS(genetic_data_list, n_candidate_snps, island_cluster_size, n_migrations, ld_block_vec, n_chromosomes, chromosome_size, weight_lookup, snp_chisq, exposure_risk_levels_in, n_different_snps_weight, n_both_one_weight, migration_interval, gen_same_fitness, max_generations, initial_sample_duplicates, crossover_prop, recessive_ref_prop, recode_test_stat));
    return rcpp_result_gen;
END_RCPP
}
// epistasis_test_permute
double epistasis_test_permute(arma::mat case_inf, arma::mat comp_inf, IntegerVector target_snps_block, IntegerVector uni_target_blocks, int n_families, IntegerVector weight_lookup, int n_different_snps_weight, int n_both_one_weight, double recessive_ref_prop, double recode_test_stat);
RcppExport SEXP _epistasisGAGE_epistasis_test_permute(SEXP case_infSEXP, SEXP comp_infSEXP, SEXP target_snps_blockSEXP, SEXP uni_target_blocksSEXP, SEXP n_familiesSEXP, SEXP weight_lookupSEXP, SEXP n_different_snps_weightSEXP, SEXP n_both_one_weightSEXP, SEXP recessive_ref_propSEXP, SEXP recode_test_statSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type case_inf(case_infSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type comp_inf(comp_infSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type target_snps_block(target_snps_blockSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type uni_target_blocks(uni_target_blocksSEXP);
    Rcpp::traits::input_parameter< int >::type n_families(n_familiesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type weight_lookup(weight_lookupSEXP);
    Rcpp::traits::input_parameter< int >::type n_different_snps_weight(n_different_snps_weightSEXP);
    Rcpp::traits::input_parameter< int >::type n_both_one_weight(n_both_one_weightSEXP);
    Rcpp::traits::input_parameter< double >::type recessive_ref_prop(recessive_ref_propSEXP);
    Rcpp::traits::input_parameter< double >::type recode_test_stat(recode_test_statSEXP);
    rcpp_result_gen = Rcpp::wrap(epistasis_test_permute(case_inf, comp_inf, target_snps_block, uni_target_blocks, n_families, weight_lookup, n_different_snps_weight, n_both_one_weight, recessive_ref_prop, recode_test_stat));
    return rcpp_result_gen;
END_RCPP
}
// epistasis_test_null_scores
NumericVector epistasis_test_null_scores(int n_permutes, arma::mat case_inf, arma::mat comp_inf, IntegerVector target_snps_block, IntegerVector uni_target_blocks, int n_families, IntegerVector weight_lookup, int n_different_snps_weight, int n_both_one_weight, double recessive_ref_prop, double recode_test_stat);
RcppExport SEXP _epistasisGAGE_epistasis_test_null_scores(SEXP n_permutesSEXP, SEXP case_infSEXP, SEXP comp_infSEXP, SEXP target_snps_blockSEXP, SEXP uni_target_blocksSEXP, SEXP n_familiesSEXP, SEXP weight_lookupSEXP, SEXP n_different_snps_weightSEXP, SEXP n_both_one_weightSEXP, SEXP recessive_ref_propSEXP, SEXP recode_test_statSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_permutes(n_permutesSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type case_inf(case_infSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type comp_inf(comp_infSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type target_snps_block(target_snps_blockSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type uni_target_blocks(uni_target_blocksSEXP);
    Rcpp::traits::input_parameter< int >::type n_families(n_familiesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type weight_lookup(weight_lookupSEXP);
    Rcpp::traits::input_parameter< int >::type n_different_snps_weight(n_different_snps_weightSEXP);
    Rcpp::traits::input_parameter< int >::type n_both_one_weight(n_both_one_weightSEXP);
    Rcpp::traits::input_parameter< double >::type recessive_ref_prop(recessive_ref_propSEXP);
    Rcpp::traits::input_parameter< double >::type recode_test_stat(recode_test_statSEXP);
    rcpp_result_gen = Rcpp::wrap(epistasis_test_null_scores(n_permutes, case_inf, comp_inf, target_snps_block, uni_target_blocks, n_families, weight_lookup, n_different_snps_weight, n_both_one_weight, recessive_ref_prop, recode_test_stat));
    return rcpp_result_gen;
END_RCPP
}
// epistasis_test
List epistasis_test(IntegerVector target_snps, IntegerVector ld_block_vec, List genetic_data_list, int n_permutes, int n_different_snps_weight, int n_both_one_weight, int weight_function_int, double recessive_ref_prop, double recode_test_stat, bool warn);
RcppExport SEXP _epistasisGAGE_epistasis_test(SEXP target_snpsSEXP, SEXP ld_block_vecSEXP, SEXP genetic_data_listSEXP, SEXP n_permutesSEXP, SEXP n_different_snps_weightSEXP, SEXP n_both_one_weightSEXP, SEXP weight_function_intSEXP, SEXP recessive_ref_propSEXP, SEXP recode_test_statSEXP, SEXP warnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type target_snps(target_snpsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ld_block_vec(ld_block_vecSEXP);
    Rcpp::traits::input_parameter< List >::type genetic_data_list(genetic_data_listSEXP);
    Rcpp::traits::input_parameter< int >::type n_permutes(n_permutesSEXP);
    Rcpp::traits::input_parameter< int >::type n_different_snps_weight(n_different_snps_weightSEXP);
    Rcpp::traits::input_parameter< int >::type n_both_one_weight(n_both_one_weightSEXP);
    Rcpp::traits::input_parameter< int >::type weight_function_int(weight_function_intSEXP);
    Rcpp::traits::input_parameter< double >::type recessive_ref_prop(recessive_ref_propSEXP);
    Rcpp::traits::input_parameter< double >::type recode_test_stat(recode_test_statSEXP);
    Rcpp::traits::input_parameter< bool >::type warn(warnSEXP);
    rcpp_result_gen = Rcpp::wrap(epistasis_test(target_snps, ld_block_vec, genetic_data_list, n_permutes, n_different_snps_weight, n_both_one_weight, weight_function_int, recessive_ref_prop, recode_test_stat, warn));
    return rcpp_result_gen;
END_RCPP
}
// GxE_test
List GxE_test(IntegerVector target_snps, IntegerVector ld_block_vec, List genetic_data_list, arma::uvec exposure, IntegerVector exposure_levels, IntegerVector exposure_risk_levels, int n_permutes, int n_different_snps_weight, int n_both_one_weight, int weight_function_int, double recessive_ref_prop, double recode_test_stat);
RcppExport SEXP _epistasisGAGE_GxE_test(SEXP target_snpsSEXP, SEXP ld_block_vecSEXP, SEXP genetic_data_listSEXP, SEXP exposureSEXP, SEXP exposure_levelsSEXP, SEXP exposure_risk_levelsSEXP, SEXP n_permutesSEXP, SEXP n_different_snps_weightSEXP, SEXP n_both_one_weightSEXP, SEXP weight_function_intSEXP, SEXP recessive_ref_propSEXP, SEXP recode_test_statSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type target_snps(target_snpsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ld_block_vec(ld_block_vecSEXP);
    Rcpp::traits::input_parameter< List >::type genetic_data_list(genetic_data_listSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type exposure(exposureSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type exposure_levels(exposure_levelsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type exposure_risk_levels(exposure_risk_levelsSEXP);
    Rcpp::traits::input_parameter< int >::type n_permutes(n_permutesSEXP);
    Rcpp::traits::input_parameter< int >::type n_different_snps_weight(n_different_snps_weightSEXP);
    Rcpp::traits::input_parameter< int >::type n_both_one_weight(n_both_one_weightSEXP);
    Rcpp::traits::input_parameter< int >::type weight_function_int(weight_function_intSEXP);
    Rcpp::traits::input_parameter< double >::type recessive_ref_prop(recessive_ref_propSEXP);
    Rcpp::traits::input_parameter< double >::type recode_test_stat(recode_test_statSEXP);
    rcpp_result_gen = Rcpp::wrap(GxE_test(target_snps, ld_block_vec, genetic_data_list, exposure, exposure_levels, exposure_risk_levels, n_permutes, n_different_snps_weight, n_both_one_weight, weight_function_int, recessive_ref_prop, recode_test_stat));
    return rcpp_result_gen;
END_RCPP
}
// n2log_epistasis_pvals
NumericVector n2log_epistasis_pvals(ListOf<IntegerVector> chromosome_list, IntegerVector ld_block_vec, List genetic_data_list, int n_permutes, int n_different_snps_weight, int n_both_one_weight, int weight_function_int, double recessive_ref_prop, double recode_test_stat, Nullable<IntegerVector> exposure_in, Nullable<IntegerVector> exposure_levels_in, Nullable<IntegerVector> exposure_risk_levels_in);
RcppExport SEXP _epistasisGAGE_n2log_epistasis_pvals(SEXP chromosome_listSEXP, SEXP ld_block_vecSEXP, SEXP genetic_data_listSEXP, SEXP n_permutesSEXP, SEXP n_different_snps_weightSEXP, SEXP n_both_one_weightSEXP, SEXP weight_function_intSEXP, SEXP recessive_ref_propSEXP, SEXP recode_test_statSEXP, SEXP exposure_inSEXP, SEXP exposure_levels_inSEXP, SEXP exposure_risk_levels_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ListOf<IntegerVector> >::type chromosome_list(chromosome_listSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ld_block_vec(ld_block_vecSEXP);
    Rcpp::traits::input_parameter< List >::type genetic_data_list(genetic_data_listSEXP);
    Rcpp::traits::input_parameter< int >::type n_permutes(n_permutesSEXP);
    Rcpp::traits::input_parameter< int >::type n_different_snps_weight(n_different_snps_weightSEXP);
    Rcpp::traits::input_parameter< int >::type n_both_one_weight(n_both_one_weightSEXP);
    Rcpp::traits::input_parameter< int >::type weight_function_int(weight_function_intSEXP);
    Rcpp::traits::input_parameter< double >::type recessive_ref_prop(recessive_ref_propSEXP);
    Rcpp::traits::input_parameter< double >::type recode_test_stat(recode_test_statSEXP);
    Rcpp::traits::input_parameter< Nullable<IntegerVector> >::type exposure_in(exposure_inSEXP);
    Rcpp::traits::input_parameter< Nullable<IntegerVector> >::type exposure_levels_in(exposure_levels_inSEXP);
    Rcpp::traits::input_parameter< Nullable<IntegerVector> >::type exposure_risk_levels_in(exposure_risk_levels_inSEXP);
    rcpp_result_gen = Rcpp::wrap(n2log_epistasis_pvals(chromosome_list, ld_block_vec, genetic_data_list, n_permutes, n_different_snps_weight, n_both_one_weight, weight_function_int, recessive_ref_prop, recode_test_stat, exposure_in, exposure_levels_in, exposure_risk_levels_in));
    return rcpp_result_gen;
END_RCPP
}
// create_permuted_data
void create_permuted_data(List genetic_data_list, IntegerVector flip_these_families, bool trio_study);
RcppExport SEXP _epistasisGAGE_create_permuted_data(SEXP genetic_data_listSEXP, SEXP flip_these_familiesSEXP, SEXP trio_studySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type genetic_data_list(genetic_data_listSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type flip_these_families(flip_these_familiesSEXP);
    Rcpp::traits::input_parameter< bool >::type trio_study(trio_studySEXP);
    create_permuted_data(genetic_data_list, flip_these_families, trio_study);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_epistasisGAGE_scalar_min", (DL_FUNC) &_epistasisGAGE_scalar_min, 2},
    {"_epistasisGAGE_concat", (DL_FUNC) &_epistasisGAGE_concat, 2},
    {"_epistasisGAGE_sort_by_order", (DL_FUNC) &_epistasisGAGE_sort_by_order, 3},
    {"_epistasisGAGE_seq_by2", (DL_FUNC) &_epistasisGAGE_seq_by2, 1},
    {"_epistasisGAGE_unique_chrom_list", (DL_FUNC) &_epistasisGAGE_unique_chrom_list, 2},
    {"_epistasisGAGE_get_target_snps_ld_blocks", (DL_FUNC) &_epistasisGAGE_get_target_snps_ld_blocks, 2},
    {"_epistasisGAGE_parse_input_data", (DL_FUNC) &_epistasisGAGE_parse_input_data, 1},
    {"_epistasisGAGE_parse_input_data_GxE", (DL_FUNC) &_epistasisGAGE_parse_input_data_GxE, 1},
    {"_epistasisGAGE_compute_dif_vecs", (DL_FUNC) &_epistasisGAGE_compute_dif_vecs, 6},
    {"_epistasisGAGE_find_high_risk", (DL_FUNC) &_epistasisGAGE_find_high_risk, 7},
    {"_epistasisGAGE_switch_vals", (DL_FUNC) &_epistasisGAGE_switch_vals, 4},
    {"_epistasisGAGE_chrom_fitness_score_internal", (DL_FUNC) &_epistasisGAGE_chrom_fitness_score_internal, 11},
    {"_epistasisGAGE_chrom_fitness_score", (DL_FUNC) &_epistasisGAGE_chrom_fitness_score, 11},
    {"_epistasisGAGE_GxE_fitness_score_internal", (DL_FUNC) &_epistasisGAGE_GxE_fitness_score_internal, 12},
    {"_epistasisGAGE_GxE_fitness_score", (DL_FUNC) &_epistasisGAGE_GxE_fitness_score, 10},
    {"_epistasisGAGE_chrom_fitness_list", (DL_FUNC) &_epistasisGAGE_chrom_fitness_list, 9},
    {"_epistasisGAGE_GxE_fitness_list", (DL_FUNC) &_epistasisGAGE_GxE_fitness_list, 10},
    {"_epistasisGAGE_compute_population_fitness", (DL_FUNC) &_epistasisGAGE_compute_population_fitness, 13},
    {"_epistasisGAGE_find_top_chrom", (DL_FUNC) &_epistasisGAGE_find_top_chrom, 3},
    {"_epistasisGAGE_initiate_population", (DL_FUNC) &_epistasisGAGE_initiate_population, 17},
    {"_epistasisGAGE_check_convergence", (DL_FUNC) &_epistasisGAGE_check_convergence, 2},
    {"_epistasisGAGE_check_max_gens", (DL_FUNC) &_epistasisGAGE_check_max_gens, 2},
    {"_epistasisGAGE_run_GADGETS", (DL_FUNC) &_epistasisGAGE_run_GADGETS, 19},
    {"_epistasisGAGE_epistasis_test_permute", (DL_FUNC) &_epistasisGAGE_epistasis_test_permute, 10},
    {"_epistasisGAGE_epistasis_test_null_scores", (DL_FUNC) &_epistasisGAGE_epistasis_test_null_scores, 11},
    {"_epistasisGAGE_epistasis_test", (DL_FUNC) &_epistasisGAGE_epistasis_test, 10},
    {"_epistasisGAGE_GxE_test", (DL_FUNC) &_epistasisGAGE_GxE_test, 12},
    {"_epistasisGAGE_n2log_epistasis_pvals", (DL_FUNC) &_epistasisGAGE_n2log_epistasis_pvals, 12},
    {"_epistasisGAGE_create_permuted_data", (DL_FUNC) &_epistasisGAGE_create_permuted_data, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_epistasisGAGE(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
